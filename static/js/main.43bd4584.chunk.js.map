{"version":3,"sources":["Home/Home.jsx","Pathfinding/Node/Node.jsx","Pathfinding/Pathfinding.jsx","Sorting/Algorithms/swap.js","Sorting/Algorithms/bubblesort.js","Sorting/Algorithms/mergesort.js","Sorting/Algorithms/quicksort.js","Sorting/Algorithms/selectionsort.js","Sorting/Sorting.jsx","Sorting/Algorithms/insertionsort.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","to","Button","variant","size","React","Component","Node","Pathfinding","props","state","grid","InitGrid","this","setState","ButtonGroup","map","row","rowIdx","key","node","nodeIdx","col","isFinish","isStart","isWall","currentRow","push","createNode","swap","array","i","j","temp","getBubbleSortAnimations","animations","length","swapped","bubbleSort","getMergeSortAnimations","auxillaryarray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","merge","getQuickSortAnimations","quickSort","partitionIdx","pivot","partition","getSelectionSortAnimations","minIdx","selectionSort","Sorting","disabledButtons","resetArray","console","log","min","max","newarray","random","document","getElementById","disabled","toggleButtons","arrayElements","getElementsByClassName","elementOneIdx","elementTwoIdx","elementOneStyle","style","elementTwoStyle","color","setTimeout","backgroundColor","newNumber","innerHTML","insertionSort","getInsertionSortAnimations","id","onClick","mergeSort","value","idx","App","rel","href","integrity","crossorigin","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.43bd4584.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./Home.css\";\n\nexport default class Home extends React.Component {\n  render() {\n    return (\n      <div className=\"row\">\n        <div className=\"column\">\n          <Link to=\"/Sorting\">\n            <Button variant=\"outline-dark\" size=\"lg\">\n              Sorting\n            </Button>\n          </Link>\n        </div>\n        <div className=\"column\">\n          <Link to=\"/Pathfinding\">\n            <Button variant=\"outline-dark\" size=\"lg\">\n              Pathfinding\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nimport \"./Node.css\";\n\nexport default class Node extends React.Component {\n  render() {\n    return <div className=\"node\"></div>;\n  }\n}\n","import React from \"react\";\nimport { Button, ButtonGroup } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport Node from \"./Node/Node\";\n\nimport \"./Pathfinding.css\";\n\nexport default class Pathfinding extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n    };\n  }\n\n  componentDidMount() {\n    const grid = InitGrid();\n    this.setState({ grid });\n  }\n\n  render() {\n    const { grid } = this.state;\n\n    return (\n      <div>\n        <ButtonGroup className=\"pathfinding-button-group\">\n          <Link to=\"/\">\n            <Button variant=\"primary\">Home</Button>\n          </Link>\n          <Button variant=\"secondary\">Djikstra's</Button>\n          <Button variant=\"secondary\">A* Search</Button>\n          <Button variant=\"secondary\">Depth-First Search</Button>\n          <Button variant=\"secondary\">Breadth-First Search</Button>\n          <Button variant=\"primary\">Reset</Button>\n        </ButtonGroup>\n\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const { row, col, isFinish, isStart, isWall } = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      row={row}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst InitGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(row, col));\n    }\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (row, col) => {\n  return {\n    col,\n    row,\n    isStart: false,\n    isFinish: false,\n    isWall: false,\n  };\n};\n","export function swap(array, i, j) {\n  let temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n}\n","import { swap } from \"./swap\";\n\nexport function getBubbleSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  bubbleSort(array, animations);\n  return animations;\n}\n\nfunction bubbleSort(array, animations) {\n  var swapped = false;\n\n  for (let i = 0; i < array.length - 1; i++) {\n    swapped = false;\n    for (let j = 0; j < array.length - i - 1; j++) {\n      // push indices to highlight and show what elements\n      // are being compared\n      animations.push([j, j + 1]);\n      animations.push([j, j + 1]);\n\n      if (array[j] > array[j + 1]) {\n        // push indices and their swapped elements to apply\n        // to array on screen\n        animations.push([j, array[j + 1]]);\n        animations.push([j + 1, array[j]]);\n\n        // swap the elements in array\n        swap(array, j, j + 1);\n\n        // make sure the loop runs again, because\n        // the algorithm is not done sorting\n        swapped = true;\n      } else {\n        // if the two elements are in order,\n        // don't do anything\n        animations.push([j, array[j]]);\n        animations.push([j + 1, array[j + 1]]);\n      }\n    }\n\n    // if no two elements are swapped, break and return\n    if (!swapped) {\n      break;\n    }\n  }\n}\n","export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxillaryarray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxillaryarray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxillaryarray,\n  animations\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxillaryarray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxillaryarray, middleIdx + 1, endIdx, mainArray, animations);\n  merge(mainArray, startIdx, middleIdx, endIdx, auxillaryarray, animations);\n}\n\nfunction merge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxillaryarray,\n  animations\n) {\n  let k = startIdx,\n    i = startIdx,\n    j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    animations.push([i, j]);\n    animations.push([i, j]);\n\n    if (auxillaryarray[i] <= auxillaryarray[j]) {\n      animations.push([k, auxillaryarray[i]]);\n      mainArray[k++] = auxillaryarray[i++];\n    } else {\n      animations.push([k, auxillaryarray[j]]);\n      mainArray[k++] = auxillaryarray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, auxillaryarray[i]]);\n    mainArray[k++] = auxillaryarray[i++];\n  }\n\n  while (j <= endIdx) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n    animations.push([k, auxillaryarray[j]]);\n    mainArray[k++] = auxillaryarray[j++];\n  }\n}\n","import { swap } from \"./swap\";\n\nexport function getQuickSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  quickSort(array, 0, array.length - 1, animations);\n  return animations;\n}\n\nfunction quickSort(array, startIdx, endIdx, animations) {\n  if (startIdx < endIdx) {\n    let partitionIdx = partition(array, startIdx, endIdx, animations);\n\n    quickSort(array, startIdx, partitionIdx - 1, animations);\n    quickSort(array, partitionIdx + 1, endIdx, animations);\n  }\n}\n\nfunction partition(array, startIdx, endIdx, animations) {\n  let pivot = array[endIdx];\n  let i = startIdx - 1;\n\n  for (let j = startIdx; j <= endIdx - 1; j++) {\n    if (array[j] < pivot) {\n      i++;\n      swap(array, i, j);\n    }\n  }\n  swap(array, i + 1, endIdx);\n  return i + 1;\n}\n","import { swap } from \"./swap\";\n\nexport function getSelectionSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  selectionSort(array, animations);\n  return animations;\n}\n\nfunction selectionSort(array, animations) {\n  for (let i = 0; i < array.length - 1; i++) {\n    let minIdx = i;\n    animations.push([minIdx, -1]);\n    for (let j = i + 1; j < array.length; j++) {\n      animations.push([j, j]);\n      animations.push([j, j]);\n      if (array[j] < array[minIdx]) {\n        minIdx = j;\n      }\n    }\n    animations.push([minIdx, -1]);\n\n    animations.push([minIdx, array[minIdx]]);\n    animations.push([i, array[i]]);\n    swap(array, minIdx, i);\n  }\n}\n","import React from \"react\";\nimport { Button, ButtonGroup } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport { getBubbleSortAnimations } from \"./Algorithms/bubblesort\";\nimport { getMergeSortAnimations } from \"./Algorithms/mergesort\";\nimport { getInsertionSortAnimations } from \"./Algorithms/insertionsort\";\nimport { getQuickSortAnimations } from \"./Algorithms/quicksort\";\nimport { getSelectionSortAnimations } from \"./Algorithms/selectionsort\";\n\nimport \"./Sorting.css\";\n\nconst ARRAY_SIZE = 12;\nconst PRIMARY_COLOR = \"#c0c0c0\";\nconst SECONDARY_COLOR = \"#34eb61\";\nconst ANIMATION_SPEED = 150;\n\nexport default class Sorting extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      disabledButtons: false,\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    console.log(\"Resetting array...\");\n\n    const newarray = [];\n    for (let i = 0; i < ARRAY_SIZE; i++) {\n      newarray.push(randomInt(1, 99));\n    }\n\n    this.setState({ array: newarray, disabledButtons: false });\n  }\n\n  toggleButtons() {\n    if (this.state.disabledButtons) {\n      // enable button group\n      document.getElementById(\"homebutton\").disabled = false;\n      document.getElementById(\"bubblesortbutton\").disabled = false;\n      document.getElementById(\"mergesortbutton\").disabled = false;\n      document.getElementById(\"insertionsortbutton\").disabled = false;\n      document.getElementById(\"selectionsortbutton\").disabled = false;\n      document.getElementById(\"quicksortbutton\").disabled = false;\n      document.getElementById(\"resetbutton\").disabled = false;\n      this.setState({ disabledButtons: false });\n    } else {\n      // disable button group\n      document.getElementById(\"homebutton\").disabled = true;\n      document.getElementById(\"bubblesortbutton\").disabled = true;\n      document.getElementById(\"mergesortbutton\").disabled = true;\n      document.getElementById(\"insertionsortbutton\").disabled = true;\n      document.getElementById(\"selectionsortbutton\").disabled = true;\n      document.getElementById(\"quicksortbutton\").disabled = true;\n      document.getElementById(\"resetbutton\").disabled = true;\n      this.setState({ disabledButtons: true });\n    }\n  }\n\n  mergeSort() {\n    console.log(\"Running Merge Sort...\");\n    this.toggleButtons();\n\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayElements = document.getElementsByClassName(\"array-element\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [elementOneIdx, elementTwoIdx] = animations[i];\n        const elementOneStyle = arrayElements[elementOneIdx].style;\n        const elementTwoStyle = arrayElements[elementTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          elementOneStyle.backgroundColor = color;\n          elementTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED);\n      } else {\n        setTimeout(() => {\n          const [elementOneIdx, newNumber] = animations[i];\n          arrayElements[elementOneIdx].innerHTML = newNumber;\n        }, i * ANIMATION_SPEED);\n      }\n    }\n\n    setTimeout(() => {\n      this.toggleButtons();\n    }, (animations.length + 1) * ANIMATION_SPEED);\n  }\n\n  bubbleSort() {\n    console.log(\"Running Bubble Sort...\");\n    this.toggleButtons();\n\n    const animations = getBubbleSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayElements = document.getElementsByClassName(\"array-element\");\n      const isColorChange = i % 4 < 2;\n      if (isColorChange) {\n        const [elementOneIdx, elementTwoIdx] = animations[i];\n        const elementOneStyle = arrayElements[elementOneIdx].style;\n        const elementTwoStyle = arrayElements[elementTwoIdx].style;\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          elementOneStyle.backgroundColor = color;\n          elementTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED);\n      } else {\n        setTimeout(() => {\n          const [elementOneIdx, newNumber] = animations[i];\n          arrayElements[elementOneIdx].innerHTML = newNumber;\n        }, i * ANIMATION_SPEED);\n      }\n    }\n\n    setTimeout(() => {\n      this.toggleButtons();\n    }, (animations.length + 1) * ANIMATION_SPEED);\n  }\n\n  selectionSort() {\n    console.log(\"Running Selection Sort...\");\n    this.toggleButtons();\n\n    const animations = getSelectionSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayElements = document.getElementsByClassName(\"array-element\");\n    }\n\n    setTimeout(() => {\n      this.toggleButtons();\n    }, (animations.length + 1) * ANIMATION_SPEED);\n  }\n\n  quickSort() {\n    console.log(\"Running Quick Sort...\");\n    this.toggleButtons();\n\n    const animations = getQuickSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayElements = document.getElementsByClassName(\"array-element\");\n    }\n\n    setTimeout(() => {\n      this.toggleButtons();\n    }, (animations.length + 1) * ANIMATION_SPEED);\n  }\n\n  insertionSort() {\n    console.log(\"Running Insertion Sort...\");\n    this.toggleButtons();\n\n    const animations = getInsertionSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayElements = document.getElementsByClassName(\"array-element\");\n    }\n\n    setTimeout(() => {\n      this.toggleButtons();\n    }, (animations.length + 1) * ANIMATION_SPEED);\n  }\n\n  render() {\n    const { array } = this.state;\n\n    return (\n      <div>\n        <ButtonGroup className=\"sort-button-group\">\n          <Link to=\"/\">\n            <Button variant=\"primary\" id=\"homebutton\">\n              Home\n            </Button>\n          </Link>\n          <Button\n            variant=\"secondary\"\n            id=\"bubblesortbutton\"\n            onClick={() => this.bubbleSort()}\n          >\n            Bubble Sort\n          </Button>\n          <Button\n            variant=\"secondary\"\n            id=\"mergesortbutton\"\n            onClick={() => this.mergeSort()}\n          >\n            Merge Sort\n          </Button>\n          <Button\n            variant=\"secondary\"\n            id=\"insertionsortbutton\"\n            onClick={() => this.insertionSort()}\n          >\n            Insertion Sort\n          </Button>\n          <Button\n            variant=\"secondary\"\n            id=\"selectionsortbutton\"\n            onClick={() => this.selectionSort()}\n          >\n            Selection Sort\n          </Button>\n          <Button\n            variant=\"secondary\"\n            id=\"quicksortbutton\"\n            onClick={() => this.quickSort()}\n          >\n            Quick Sort\n          </Button>\n          <Button\n            variant=\"primary\"\n            id=\"resetbutton\"\n            onClick={() => this.resetArray()}\n          >\n            Reset\n          </Button>\n        </ButtonGroup>\n\n        <div className=\"array-container\">\n          {array.map((value, idx) => (\n            <div className=\"array-element\" key={idx}>\n              {value}\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","export function getInsertionSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  insertionSort(array, animations);\n  return animations;\n}\n\nfunction insertionSort(array, animations) {\n  for (let i = 1; i < array.length; i++) {\n    let key = array[i];\n    let j = i - 1;\n\n    while (j >= 0 && array[j] > key) {\n      array[j + 1] = array[j];\n      j--;\n    }\n\n    array[j + 1] = key;\n  }\n}\n","import React from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nimport Home from \"./Home/Home\";\nimport Pathfinding from \"./Pathfinding/Pathfinding\";\nimport Sorting from \"./Sorting/Sorting\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <link\n        rel=\"stylesheet\"\n        href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\"\n        integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\"\n        crossorigin=\"anonymous\"\n      />\n\n      <div className=\"Header\">\n        <h1>Sorting & Pathfinding Visualizer</h1>\n      </div>\n\n      <HashRouter basename=\"/\">\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/Sorting\" component={Sorting} />\n          <Route path=\"/Pathfinding\" component={Pathfinding} />\n        </Switch>\n      </HashRouter>\n\n      <div className=\"Footer\">\n        <p>\n          Created by Steven Te. View the source code{\" \"}\n          <a href=\"https://github.com/testeven152/sorting-pathfinding-visualizer\">\n            here\n          </a>\n          .\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}