{"version":3,"sources":["Home/Home.jsx","Pathfinding/Node/Node.jsx","Pathfinding/Algorithms/djikstra.js","Pathfinding/Pathfinding.jsx","Sorting/Algorithms/swap.js","Sorting/Algorithms/bubblesort.js","Sorting/Algorithms/mergesort.js","Sorting/Algorithms/quicksort.js","Sorting/Algorithms/selectionsort.js","Sorting/Sorting.jsx","Sorting/Algorithms/insertionsort.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","to","Button","variant","size","React","Component","Node","updateUnvisitedNodes","node","grid","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","distance","previousNode","neighbors","col","row","push","length","filter","isVisited","sortNodesByDistance","nodes","sort","nodeA","nodeB","getAllNodes","Pathfinding","props","state","mouseIsPressed","InitGrid","this","setState","newGrid","toggleIsWall","console","log","start","end","unvisited_nodes","visited_nodes","closestNode","shift","isWall","Infinity","djikstra","ButtonGroup","onClick","animateDjikstra","resetGrid","map","rowIdx","key","nodeIdx","isFinish","isStart","onMouseDown","handleMouseDown","onMouseEnter","handleMouseEnter","onMouseUp","handleMouseUp","currentRow","createNode","slice","newNode","swap","array","i","j","temp","getBubbleSortAnimations","animations","swapped","bubbleSort","getMergeSortAnimations","auxillaryarray","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","merge","getQuickSortAnimations","quickSort","partitionIdx","pivot","partition","getSelectionSortAnimations","minIdx","selectionSort","GRAY","GREEN","RED","Sorting","disabledButtons","resetArray","min","max","newarray","random","document","getElementById","disabled","toggleButtons","arrayElements","getElementsByClassName","elementOneIdx","elementTwoIdx","elementOneStyle","style","elementTwoStyle","color","setTimeout","backgroundColor","newNumber","innerHTML","comparing","insertionSort","getInsertionSortAnimations","id","mergeSort","value","idx","App","rel","href","integrity","crossorigin","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6bc7f376.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./Home.css\";\n\nexport default class Home extends React.Component {\n  render() {\n    return (\n      <div className=\"row\">\n        <div className=\"column\">\n          <Link to=\"/Sorting\">\n            <Button variant=\"outline-dark\" size=\"lg\">\n              Sorting\n            </Button>\n          </Link>\n        </div>\n        <div className=\"column\">\n          <Link to=\"/Pathfinding\">\n            <Button variant=\"outline-dark\" size=\"lg\">\n              Pathfinding\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nimport \"./Node.css\";\n\nexport default class Node extends React.Component {\n  render() {\n    return <div className=\"node\"></div>;\n  }\n}\n","export function djikstra(grid, start, end) {\n  const unvisited_nodes = getAllNodes(grid);\n  const visited_nodes = [];\n\n  start.distance = 0;\n\n  while (unvisited_nodes.length !== 0) {\n    sortNodesByDistance(unvisited_nodes);\n    const closestNode = unvisited_nodes.shift();\n\n    if (closestNode.isWall) continue;\n\n    if (closestNode.distance === Infinity) return visited_nodes;\n    closestNode.isVisited = true;\n    visited_nodes.push(closestNode);\n\n    if (closestNode === end) return visited_nodes;\n    updateUnvisitedNodes(closestNode, grid);\n  }\n}\n\nconst updateUnvisitedNodes = (node, grid) => {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n};\n\nconst getUnvisitedNeighbors = (node, grid) => {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\n};\n\nconst sortNodesByDistance = (nodes) => {\n  nodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n};\n\nconst getAllNodes = (grid) => {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n};\n","import React from \"react\";\nimport { Button, ButtonGroup } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport Node from \"./Node/Node\";\nimport { djikstra } from \"./Algorithms/djikstra\";\n\nimport \"./Pathfinding.css\";\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst END_NODE_ROW = 10;\nconst END_NODE_COL = 35;\n\nexport default class Pathfinding extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = InitGrid();\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = toggleIsWall(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n    console.log(\"handleMouseDown\");\n  }\n\n  handleMouseEnter(row, col) {\n    const newGrid = toggleIsWall(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n    console.log(\"handleMouseEnter\");\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n    console.log(\"handleMouseUp\");\n  }\n\n  animateDjikstra() {\n    const { grid } = this.state;\n    const startnode = grid[START_NODE_ROW][START_NODE_COL];\n    const endnode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitedNodesInOrder = djikstra(grid, startnode, endnode);\n  }\n\n  resetGrid() {\n    const newGrid = InitGrid();\n    this.setState({ grid: newGrid });\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n\n    return (\n      <div>\n        <ButtonGroup className=\"pathfinding-button-group\">\n          <Link to=\"/\">\n            <Button variant=\"primary\">Home</Button>\n          </Link>\n          <Button variant=\"secondary\" onClick={() => this.animateDjikstra()}>\n            Djikstra's\n          </Button>\n          <Button variant=\"secondary\">A* Search</Button>\n          <Button variant=\"secondary\">Depth-First Search</Button>\n          <Button variant=\"secondary\">Breadth-First Search</Button>\n          <Button variant=\"primary\" onClick={() => this.resetGrid()}>\n            Reset\n          </Button>\n        </ButtonGroup>\n\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const { row, col, isFinish, isStart, isWall } = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst InitGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(row, col));\n    }\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (row, col) => {\n  return {\n    col,\n    row,\n    isStart: false,\n    isFinish: false,\n    isWall: false,\n  };\n};\n\nconst toggleIsWall = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n","export function swap(array, i, j) {\n  let temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n}\n","import { swap } from \"./swap\";\n\nexport function getBubbleSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxillaryarray = array.slice();\n  bubbleSort(auxillaryarray, animations);\n  return animations;\n}\n\nfunction bubbleSort(array, animations) {\n  var swapped = false;\n\n  for (let i = 0; i < array.length - 1; i++) {\n    swapped = false;\n    for (let j = 0; j < array.length - i - 1; j++) {\n      // push indices to highlight and show what elements\n      // are being compared\n      animations.push([j, j + 1]);\n      animations.push([j, j + 1]);\n\n      if (array[j] > array[j + 1]) {\n        // push indices and their swapped elements to apply\n        // to array on screen\n        animations.push([j, array[j + 1]]);\n        animations.push([j + 1, array[j]]);\n\n        // swap the elements in array\n        swap(array, j, j + 1);\n\n        // make sure the loop runs again, because\n        // the algorithm is not done sorting\n        swapped = true;\n      } else {\n        // if the two elements are in order,\n        // don't do anything\n        animations.push([j, array[j]]);\n        animations.push([j + 1, array[j + 1]]);\n      }\n    }\n\n    // if no two elements are swapped, break and return\n    if (!swapped) {\n      break;\n    }\n  }\n}\n","export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxillaryarray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxillaryarray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxillaryarray,\n  animations\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxillaryarray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxillaryarray, middleIdx + 1, endIdx, mainArray, animations);\n  merge(mainArray, startIdx, middleIdx, endIdx, auxillaryarray, animations);\n}\n\nfunction merge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxillaryarray,\n  animations\n) {\n  let k = startIdx,\n    i = startIdx,\n    j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    animations.push([i, j]);\n    animations.push([i, j]);\n\n    if (auxillaryarray[i] <= auxillaryarray[j]) {\n      animations.push([k, auxillaryarray[i]]);\n      mainArray[k++] = auxillaryarray[i++];\n    } else {\n      animations.push([k, auxillaryarray[j]]);\n      mainArray[k++] = auxillaryarray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, auxillaryarray[i]]);\n    mainArray[k++] = auxillaryarray[i++];\n  }\n\n  while (j <= endIdx) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n    animations.push([k, auxillaryarray[j]]);\n    mainArray[k++] = auxillaryarray[j++];\n  }\n}\n","import { swap } from \"./swap\";\n\nexport function getQuickSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  quickSort(array, 0, array.length - 1, animations);\n  return animations;\n}\n\nfunction quickSort(array, startIdx, endIdx, animations) {\n  if (startIdx < endIdx) {\n    let partitionIdx = partition(array, startIdx, endIdx, animations);\n\n    quickSort(array, startIdx, partitionIdx - 1, animations);\n    quickSort(array, partitionIdx + 1, endIdx, animations);\n  }\n}\n\nfunction partition(array, startIdx, endIdx, animations) {\n  let pivot = array[endIdx];\n  let i = startIdx - 1;\n\n  animations.push([endIdx, -1]);\n\n  for (let j = startIdx; j <= endIdx - 1; j++) {\n    animations.push([j, -2]);\n    animations.push([j, -3]);\n    if (array[j] < pivot) {\n      i++;\n      swap(array, i, j);\n    }\n  }\n\n  animations.push([endIdx, -1]);\n\n  animations.push([i + 1, array[endIdx]]);\n  animations.push([endIdx, array[i + 1]]);\n  swap(array, i + 1, endIdx);\n  return i + 1;\n}\n","import { swap } from \"./swap\";\n\nexport function getSelectionSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxillaryarray = array.slice();\n  selectionSort(auxillaryarray, animations);\n  return animations;\n}\n\nfunction selectionSort(array, animations) {\n  for (let i = 0; i < array.length - 1; i++) {\n    let minIdx = i;\n    animations.push([i, -1]);\n    for (let j = i + 1; j < array.length; j++) {\n      animations.push([j, -2]);\n      animations.push([j, -3]);\n      if (array[j] < array[minIdx]) {\n        minIdx = j;\n      }\n    }\n\n    animations.push([minIdx, array[i]]);\n    animations.push([i, array[minIdx]]);\n    swap(array, minIdx, i);\n\n    animations.push([i, -1]);\n  }\n}\n","import React from \"react\";\nimport { Button, ButtonGroup } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport { getBubbleSortAnimations } from \"./Algorithms/bubblesort\";\nimport { getMergeSortAnimations } from \"./Algorithms/mergesort\";\nimport { getInsertionSortAnimations } from \"./Algorithms/insertionsort\";\nimport { getQuickSortAnimations } from \"./Algorithms/quicksort\";\nimport { getSelectionSortAnimations } from \"./Algorithms/selectionsort\";\n\nimport \"./Sorting.css\";\n\nconst ARRAY_SIZE = 12;\nconst GRAY = \"#c0c0c0\";\nconst GREEN = \"#34eb61\";\nconst RED = \"#eb4034\";\nconst ANIMATION_SPEED = 150;\n\nexport default class Sorting extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      disabledButtons: false,\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    console.log(\"Resetting array...\");\n\n    const newarray = [];\n    for (let i = 0; i < ARRAY_SIZE; i++) {\n      newarray.push(randomInt(1, 99));\n    }\n\n    this.setState({ array: newarray, disabledButtons: false });\n  }\n\n  toggleButtons() {\n    if (this.state.disabledButtons) {\n      // enable button group\n      document.getElementById(\"homebutton\").disabled = false;\n      document.getElementById(\"bubblesortbutton\").disabled = false;\n      document.getElementById(\"mergesortbutton\").disabled = false;\n      document.getElementById(\"insertionsortbutton\").disabled = false;\n      document.getElementById(\"selectionsortbutton\").disabled = false;\n      document.getElementById(\"quicksortbutton\").disabled = false;\n      document.getElementById(\"resetbutton\").disabled = false;\n      this.setState({ disabledButtons: false });\n    } else {\n      // disable button group\n      document.getElementById(\"homebutton\").disabled = true;\n      document.getElementById(\"bubblesortbutton\").disabled = true;\n      document.getElementById(\"mergesortbutton\").disabled = true;\n      document.getElementById(\"insertionsortbutton\").disabled = true;\n      document.getElementById(\"selectionsortbutton\").disabled = true;\n      document.getElementById(\"quicksortbutton\").disabled = true;\n      document.getElementById(\"resetbutton\").disabled = true;\n      this.setState({ disabledButtons: true });\n    }\n  }\n\n  mergeSort() {\n    console.log(\"Running Merge Sort...\");\n    this.toggleButtons();\n\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayElements = document.getElementsByClassName(\"array-element\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [elementOneIdx, elementTwoIdx] = animations[i];\n        const elementOneStyle = arrayElements[elementOneIdx].style;\n        const elementTwoStyle = arrayElements[elementTwoIdx].style;\n        const color = i % 3 === 0 ? GREEN : GRAY;\n        setTimeout(() => {\n          elementOneStyle.backgroundColor = color;\n          elementTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED);\n      } else {\n        setTimeout(() => {\n          const [elementOneIdx, newNumber] = animations[i];\n          arrayElements[elementOneIdx].innerHTML = newNumber;\n        }, i * ANIMATION_SPEED);\n      }\n    }\n\n    setTimeout(() => {\n      this.toggleButtons();\n    }, (animations.length + 1) * ANIMATION_SPEED);\n  }\n\n  bubbleSort() {\n    console.log(\"Running Bubble Sort...\");\n    this.toggleButtons();\n\n    const animations = getBubbleSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayElements = document.getElementsByClassName(\"array-element\");\n      const isColorChange = i % 4 < 2;\n      if (isColorChange) {\n        const [elementOneIdx, elementTwoIdx] = animations[i];\n        const elementOneStyle = arrayElements[elementOneIdx].style;\n        const elementTwoStyle = arrayElements[elementTwoIdx].style;\n        const color = i % 4 === 0 ? GREEN : GRAY;\n        setTimeout(() => {\n          elementOneStyle.backgroundColor = color;\n          elementTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED);\n      } else {\n        setTimeout(() => {\n          const [elementOneIdx, newNumber] = animations[i];\n          arrayElements[elementOneIdx].innerHTML = newNumber;\n        }, i * ANIMATION_SPEED);\n      }\n    }\n\n    setTimeout(() => {\n      this.toggleButtons();\n    }, (animations.length + 1) * ANIMATION_SPEED);\n  }\n\n  selectionSort() {\n    console.log(\"Running Selection Sort...\");\n    this.toggleButtons();\n\n    const animations = getSelectionSortAnimations(this.state.array);\n    let comparing = false;\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayElements = document.getElementsByClassName(\"array-element\");\n      const [elementOneIdx, elementTwoIdx] = animations[i];\n      const elementOneStyle = arrayElements[elementOneIdx].style;\n      if (elementTwoIdx === -1) {\n        setTimeout(() => {\n          const color = comparing === false ? RED : GRAY;\n          elementOneStyle.backgroundColor = color;\n          comparing = !comparing;\n        }, i * ANIMATION_SPEED);\n      } else if (elementTwoIdx === -2 || elementTwoIdx === -3) {\n        setTimeout(() => {\n          const color = elementTwoIdx === -2 ? GREEN : GRAY;\n          elementOneStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED);\n      } else {\n        setTimeout(() => {\n          arrayElements[elementOneIdx].innerHTML = elementTwoIdx;\n        }, i * ANIMATION_SPEED);\n      }\n    }\n\n    setTimeout(() => {\n      this.toggleButtons();\n    }, (animations.length + 1) * ANIMATION_SPEED);\n  }\n\n  quickSort() {\n    console.log(\"Running Quick Sort...\");\n    this.toggleButtons();\n\n    const animations = getQuickSortAnimations(this.state.array);\n\n    let comparing = false;\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayElements = document.getElementsByClassName(\"array-element\");\n      const [elementOneIdx, elementTwoIdx] = animations[i];\n      const elementOneStyle = arrayElements[elementOneIdx].style;\n      if (elementTwoIdx === -1) {\n        setTimeout(() => {\n          const color = comparing === false ? RED : GRAY;\n          elementOneStyle.backgroundColor = color;\n          comparing = !comparing;\n        }, i * ANIMATION_SPEED);\n      } else if (elementTwoIdx === -2 || elementTwoIdx === -3) {\n        setTimeout(() => {\n          const color = elementTwoIdx === -2 ? GREEN : GRAY;\n          elementOneStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED);\n      } else {\n        setTimeout(() => {\n          arrayElements[elementOneIdx].innerHTML = elementTwoIdx;\n        }, i * ANIMATION_SPEED);\n      }\n    }\n\n    setTimeout(() => {\n      this.toggleButtons();\n    }, (animations.length + 1) * ANIMATION_SPEED);\n  }\n\n  insertionSort() {\n    console.log(\"Running Insertion Sort...\");\n    this.toggleButtons();\n\n    const animations = getInsertionSortAnimations(this.state.array);\n\n    let comparing = false;\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayElements = document.getElementsByClassName(\"array-element\");\n\n      const [elementOneIdx, elementTwoIdx] = animations[i];\n      const elementOneStyle = arrayElements[elementOneIdx].style;\n\n      if (elementTwoIdx === -1) {\n        setTimeout(() => {\n          const color = comparing === false ? RED : GRAY;\n          elementOneStyle.backgroundColor = color;\n          comparing = !comparing;\n        }, i * ANIMATION_SPEED);\n      } else if (elementTwoIdx === -2 || elementTwoIdx === -3) {\n        setTimeout(() => {\n          const color = elementTwoIdx === -2 ? GREEN : GRAY;\n          elementOneStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED);\n      } else {\n        setTimeout(() => {\n          arrayElements[elementOneIdx].innerHTML = elementTwoIdx;\n        }, i * ANIMATION_SPEED);\n      }\n    }\n\n    setTimeout(() => {\n      this.toggleButtons();\n    }, (animations.length + 1) * ANIMATION_SPEED);\n  }\n\n  render() {\n    const { array } = this.state;\n\n    return (\n      <div>\n        <ButtonGroup className=\"sort-button-group\">\n          <Link to=\"/\">\n            <Button variant=\"primary\" id=\"homebutton\">\n              Home\n            </Button>\n          </Link>\n          <Button\n            variant=\"secondary\"\n            id=\"bubblesortbutton\"\n            onClick={() => this.bubbleSort()}\n          >\n            Bubble Sort\n          </Button>\n          <Button\n            variant=\"secondary\"\n            id=\"mergesortbutton\"\n            onClick={() => this.mergeSort()}\n          >\n            Merge Sort\n          </Button>\n          <Button\n            variant=\"secondary\"\n            id=\"insertionsortbutton\"\n            onClick={() => this.insertionSort()}\n          >\n            Insertion Sort\n          </Button>\n          <Button\n            variant=\"secondary\"\n            id=\"selectionsortbutton\"\n            onClick={() => this.selectionSort()}\n          >\n            Selection Sort\n          </Button>\n          <Button\n            variant=\"secondary\"\n            id=\"quicksortbutton\"\n            onClick={() => this.quickSort()}\n          >\n            Quick Sort\n          </Button>\n          <Button\n            variant=\"primary\"\n            id=\"resetbutton\"\n            onClick={() => this.resetArray()}\n          >\n            Reset\n          </Button>\n        </ButtonGroup>\n\n        <div className=\"array-container\">\n          {array.map((value, idx) => (\n            <div className=\"array-element\" key={idx}>\n              {value}\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","export function getInsertionSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxillaryarray = array.slice();\n  insertionSort(auxillaryarray, animations);\n  return animations;\n}\n\nfunction insertionSort(array, animations) {\n  for (let i = 1; i < array.length; i++) {\n    let key = array[i];\n    let j = i - 1;\n\n    animations.push([i, -1]);\n    while (j >= 0 && array[j] > key) {\n      animations.push([j, -2]);\n      animations.push([j, -3]);\n      animations.push([j + 1, array[j]]);\n      array[j + 1] = array[j];\n      j--;\n    }\n\n    animations.push([i, -1]);\n    animations.push([j + 1, key]);\n    array[j + 1] = key;\n  }\n}\n","import React from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nimport Home from \"./Home/Home\";\nimport Pathfinding from \"./Pathfinding/Pathfinding\";\nimport Sorting from \"./Sorting/Sorting\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <link\n        rel=\"stylesheet\"\n        href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\"\n        integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\"\n        crossorigin=\"anonymous\"\n      />\n\n      <div className=\"Header\">\n        <h1>Sorting & Pathfinding Visualizer</h1>\n      </div>\n\n      <HashRouter basename=\"/\">\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/Sorting\" component={Sorting} />\n          <Route path=\"/Pathfinding\" component={Pathfinding} />\n        </Switch>\n      </HashRouter>\n\n      <div className=\"Footer\">\n        <p>\n          Created by Steven Te. View the source code{\" \"}\n          <a href=\"https://github.com/testeven152/sorting-pathfinding-visualizer\">\n            here\n          </a>\n          .\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}