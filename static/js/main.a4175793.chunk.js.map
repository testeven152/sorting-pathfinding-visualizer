{"version":3,"sources":["Home/Home.jsx","Pathfinding/Node/Node.jsx","Pathfinding/Pathfinding.jsx","Sorting/Sorting.jsx","Sorting/Algorithms/bubblesort.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","to","Button","variant","size","React","Component","Node","Pathfinding","props","state","grid","InitGrid","this","setState","ButtonGroup","map","row","rowIdx","key","node","nodeIdx","col","isFinish","isStart","isWall","currentRow","push","createNode","Sorting","array","resetArray","console","log","min","max","i","Math","floor","random","type","animations","onClick","applyAnimations","value","idx","App","exact","path","component","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a4175793.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./Home.css\";\n\nexport default class Home extends React.Component {\n  render() {\n    return (\n      <div className=\"row\">\n        <div className=\"column\">\n          <Link to=\"/Sorting\">\n            <Button variant=\"outline-dark\" size=\"lg\">\n              Sorting\n            </Button>\n          </Link>\n        </div>\n        <div className=\"column\">\n          <Link to=\"/Pathfinding\">\n            <Button variant=\"outline-dark\" size=\"lg\">\n              Pathfinding\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nimport \"./Node.css\";\n\nexport default class Node extends React.Component {\n  render() {\n    return <div className=\"node\"></div>;\n  }\n}\n","import React from \"react\";\nimport { Button, ButtonGroup } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport Node from \"./Node/Node\";\n\nimport \"./Pathfinding.css\";\n\nexport default class Pathfinding extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n    };\n  }\n\n  componentDidMount() {\n    const grid = InitGrid();\n    this.setState({ grid });\n  }\n\n  render() {\n    const { grid } = this.state;\n\n    return (\n      <div>\n        <ButtonGroup className=\"pathfinding-button-group\">\n          <Link to=\"/\">\n            <Button variant=\"primary\">Home</Button>\n          </Link>\n          <Button variant=\"secondary\">Djikstra's</Button>\n          <Button variant=\"secondary\">A* Search</Button>\n          <Button variant=\"secondary\">Depth-First Search</Button>\n          <Button variant=\"secondary\">Breadth-First Search</Button>\n          <Button variant=\"primary\">Reset</Button>\n        </ButtonGroup>\n\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const { row, col, isFinish, isStart, isWall } = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      row={row}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst InitGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(row, col));\n    }\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (row, col) => {\n  return {\n    col,\n    row,\n    isStart: false,\n    isFinish: false,\n    isWall: false,\n  };\n};\n","import React from \"react\";\nimport { Button, ButtonGroup } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport { getBubbleSortAnimations } from \"./Algorithms/bubblesort\";\nimport { getMergeSortAnimations } from \"./Algorithms/mergesort\";\nimport { getInsertionSortAnimations } from \"./Algorithms/insertionsort\";\nimport { getQuickSortAnimations } from \"./Algorithms/quicksort\";\nimport { getSelectionSortAnimations } from \"./Algorithms/selectionsort\";\n\nimport \"./Sorting.css\";\n\nexport default class Sorting extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    console.log(\"Resetting array...\");\n\n    const array = [];\n    for (let i = 0; i < 20; i++) {\n      array.push(randomInt(1, 99));\n    }\n\n    this.setState({ array });\n  }\n\n  applyAnimations(type) {\n    console.log(\"Running %s Sort...\", type);\n\n    var animations = [];\n\n    if (type === \"Bubble\") {\n      animations = getBubbleSortAnimations(this.state.array);\n    } else if (type === \"Merge\") {\n      animations = getMergeSortAnimations(this.state.array);\n    } else if (type === \"Insertion\") {\n      animations = getInsertionSortAnimations(this.state.array);\n    } else if (type === \"Selection\") {\n      animations = getSelectionSortAnimations(this.state.array);\n    } else if (type === \"Quick\") {\n      animations = getQuickSortAnimations(this.state.array);\n    }\n\n    console.log(animations);\n  }\n\n  render() {\n    const { array } = this.state;\n\n    return (\n      <div>\n        <ButtonGroup className=\"sort-button-group\">\n          <Link to=\"/\">\n            <Button variant=\"primary\">Home</Button>\n          </Link>\n          <Button\n            variant=\"secondary\"\n            onClick={() => this.applyAnimations(\"Bubble\")}\n          >\n            Bubble Sort\n          </Button>\n          <Button\n            variant=\"secondary\"\n            onClick={() => this.applyAnimations(\"Merge\")}\n          >\n            Merge Sort\n          </Button>\n          <Button\n            variant=\"secondary\"\n            onClick={() => this.applyAnimations(\"Insertion\")}\n          >\n            Insertion Sort\n          </Button>\n          <Button\n            variant=\"secondary\"\n            onClick={() => this.applyAnimations(\"Selection\")}\n          >\n            Selection Sort\n          </Button>\n          <Button\n            variant=\"secondary\"\n            onClick={() => this.applyAnimations(\"Quick\")}\n          >\n            Quick Sort\n          </Button>\n          <Button variant=\"primary\" onClick={() => this.resetArray()}>\n            Reset\n          </Button>\n        </ButtonGroup>\n\n        <div className=\"array-container\">\n          {array.map((value, idx) => (\n            <div className=\"array-element\" key={idx}>\n              {value}\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","export function getBubbleSortAnimations(array) {\n  const animations = [];\n\n  return animations;\n}\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport Home from \"./Home/Home\";\nimport Pathfinding from \"./Pathfinding/Pathfinding\";\nimport Sorting from \"./Sorting/Sorting\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Sorting & Pathfinding Visualizer</h1>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/Sorting\" component={Sorting} />\n          <Route path=\"/Pathfinding\" component={Pathfinding} />\n        </Switch>\n      </BrowserRouter>\n\n      <div className=\"Footer\">\n        <p>\n          Created by Steven Te. View the source code{\" \"}\n          <a href=\"https://github.com/testeven152/sorting-pathfinding-visualizer\">\n            here\n          </a>\n          .\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}