{"version":3,"sources":["Home/Home.jsx","Pathfinding/Node/Node.jsx","Pathfinding/Algorithms/djikstra.js","Pathfinding/Pathfinding.jsx","Sorting/Algorithms/swap.js","Sorting/Algorithms/bubblesort.js","Sorting/Algorithms/mergesort.js","Sorting/Algorithms/quicksort.js","Sorting/Algorithms/selectionsort.js","Sorting/Sorting.jsx","Sorting/Algorithms/insertionsort.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","to","Button","variant","size","React","Component","Node","this","props","row","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","extraClassName","id","updateUnvisitedNodes","node","grid","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","distance","prevNode","neighbors","push","length","filter","isVisited","sortNodesByDistance","nodes","sort","nodeA","nodeB","getAllNodes","Pathfinding","state","mouseIsPressed","InitGrid","setState","newGrid","toggleIsWall","nodesInShortestPathOrder","i","setTimeout","document","getElementById","clearVisitedNodes","startnode","endnode","visitedNodesInOrder","start","end","unvisited_nodes","visited_nodes","closestNode","shift","Infinity","djikstra","finishNode","currentNode","unshift","getNodesInShortestPathOrder","animateShortestPath","slice","visitedNodes","getElementsByClassName","nodeid","split","nodeRow","Number","nodeCol","createNode","wallNodes","j","console","log","clearWallNodes","ButtonGroup","onClick","animateDjikstra","animateAStar","animateDFS","animateBFS","resetGrid","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","newNode","swap","array","temp","getBubbleSortAnimations","animations","swapped","bubbleSort","getMergeSortAnimations","auxillaryarray","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","merge","getQuickSortAnimations","quickSort","partitionIdx","pivot","partition","getSelectionSortAnimations","minIdx","selectionSort","GRAY","GREEN","RED","Sorting","disabledButtons","resetArray","min","max","newarray","random","disabled","toggleButtons","arrayElements","elementOneIdx","elementTwoIdx","elementOneStyle","style","elementTwoStyle","color","backgroundColor","newNumber","innerHTML","comparing","insertionSort","getInsertionSortAnimations","mergeSort","value","idx","App","rel","href","integrity","crossorigin","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.053fe1e9.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./Home.css\";\n\nexport default class Home extends React.Component {\n  render() {\n    return (\n      <div className=\"row\">\n        <div className=\"column\">\n          <Link to=\"/Sorting\">\n            <Button variant=\"outline-dark\" size=\"lg\">\n              Sorting\n            </Button>\n          </Link>\n        </div>\n        <div className=\"column\">\n          <Link to=\"/Pathfinding\">\n            <Button variant=\"outline-dark\" size=\"lg\">\n              Pathfinding\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport \"./Node.css\";\n\nexport default class Node extends Component {\n  render() {\n    const {\n      row,\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n    } = this.props;\n\n    const extraClassName = isFinish\n      ? \"finish\"\n      : isStart\n      ? \"start\"\n      : isWall\n      ? \"wall\"\n      : \"\";\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}\n      ></div>\n    );\n  }\n}\n","export function djikstra(grid, start, end) {\n  const unvisited_nodes = getAllNodes(grid);\n  const visited_nodes = [];\n\n  start.distance = 0;\n\n  while (unvisited_nodes.length !== 0) {\n    sortNodesByDistance(unvisited_nodes);\n    const closestNode = unvisited_nodes.shift();\n\n    if (closestNode.isWall) continue;\n\n    if (closestNode.distance === Infinity) return visited_nodes;\n    closestNode.isVisited = true;\n    visited_nodes.push(closestNode);\n\n    if (closestNode === end) return visited_nodes;\n    updateUnvisitedNodes(closestNode, grid);\n  }\n}\n\nconst updateUnvisitedNodes = (node, grid) => {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.prevNode = node;\n  }\n};\n\nconst getUnvisitedNeighbors = (node, grid) => {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\n};\n\nconst sortNodesByDistance = (nodes) => {\n  nodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n};\n\nconst getAllNodes = (grid) => {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n};\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.prevNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React from \"react\";\nimport { Button, ButtonGroup } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport Node from \"./Node/Node\";\nimport { djikstra, getNodesInShortestPathOrder } from \"./Algorithms/djikstra\";\n\nimport \"./Pathfinding.css\";\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst END_NODE_ROW = 10;\nconst END_NODE_COL = 35;\n\nconst ANIMATION_SPEED = 10;\n\nexport default class Pathfinding extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = InitGrid();\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = toggleIsWall(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = toggleIsWall(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node shortest-path\";\n      }, ANIMATION_SPEED * i);\n    }\n  }\n\n  animateDjikstra() {\n    this.clearVisitedNodes();\n\n    const { grid } = this.state;\n    const startnode = grid[START_NODE_ROW][START_NODE_COL];\n    const endnode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitedNodesInOrder = djikstra(grid, startnode, endnode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(endnode);\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, ANIMATION_SPEED * i);\n\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node visited\";\n      }, ANIMATION_SPEED * i);\n    }\n  }\n\n  animateAStar() {\n    this.clearVisitedNodes();\n  }\n\n  animateBFS() {\n    this.clearVisitedNodes();\n  }\n\n  animateDFS() {\n    this.clearVisitedNodes();\n  }\n\n  clearVisitedNodes() {\n    const newGrid = this.state.grid.slice();\n    const visitedNodes = [\n      ...document.getElementsByClassName(\"node visited\"),\n      ...document.getElementsByClassName(\"node shortest-path\"),\n    ];\n\n    if (visitedNodes.length === 0) return;\n\n    for (let i = 0; i < visitedNodes.length; i++) {\n      const nodeid = visitedNodes[i].id.split(\"-\");\n\n      const nodeRow = Number(nodeid[1]);\n      const nodeCol = Number(nodeid[2]);\n\n      if (nodeRow === START_NODE_ROW && nodeCol === START_NODE_COL) {\n        visitedNodes[i].className = \"node start\";\n      } else if (nodeRow === END_NODE_ROW && nodeCol === END_NODE_COL) {\n        visitedNodes[i].className = \"node finish\";\n      } else {\n        visitedNodes[i].className = \"node \";\n      }\n\n      visitedNodes[i].prevNode = null;\n\n      newGrid[nodeRow][nodeCol] = createNode(nodeRow, nodeCol);\n    }\n\n    this.setState({ grid: newGrid });\n  }\n\n  clearWallNodes() {\n    const newGrid = this.state.grid.slice();\n    const wallNodes = [...document.getElementsByClassName(\"node wall\")];\n    if (wallNodes.length === 0) return;\n\n    for (let j = 0; j < wallNodes.length; j++) {\n      const nodeid = wallNodes[j].id.split(\"-\");\n\n      const nodeRow = Number(nodeid[1]);\n      const nodeCol = Number(nodeid[2]);\n\n      console.log(\"node-%s-%s\", nodeRow, nodeCol);\n\n      wallNodes[j].className = \"node \";\n\n      newGrid[nodeRow][nodeCol] = createNode(nodeRow, nodeCol);\n    }\n\n    this.setState({ grid: newGrid });\n  }\n\n  resetGrid() {\n    this.clearVisitedNodes();\n    this.clearWallNodes();\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n\n    return (\n      <div>\n        <ButtonGroup className=\"pathfinding-button-group\">\n          <Link to=\"/\">\n            <Button variant=\"primary\">Home</Button>\n          </Link>\n          <Button variant=\"secondary\" onClick={() => this.animateDjikstra()}>\n            Djikstra's\n          </Button>\n          <Button variant=\"secondary\" onClick={() => this.animateAStar()}>\n            A* Search\n          </Button>\n          <Button variant=\"secondary\" onClick={() => this.animateDFS()}>\n            Depth-First Search\n          </Button>\n          <Button variant=\"secondary\" onClick={() => this.animateBFS()}>\n            Breadth-First Search\n          </Button>\n          <Button variant=\"primary\" onClick={() => this.resetGrid()}>\n            Reset\n          </Button>\n        </ButtonGroup>\n\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const { row, col, isFinish, isStart, isWall } = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      row={row}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst InitGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(row, col));\n    }\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (row, col) => {\n  return {\n    col,\n    row,\n    distance: Infinity,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === END_NODE_ROW && col === END_NODE_COL,\n    isWall: false,\n    isVisited: false,\n    prevNode: null,\n  };\n};\n\nconst toggleIsWall = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n","export function swap(array, i, j) {\n  let temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n}\n","import { swap } from \"./swap\";\n\nexport function getBubbleSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxillaryarray = array.slice();\n  bubbleSort(auxillaryarray, animations);\n  return animations;\n}\n\nfunction bubbleSort(array, animations) {\n  var swapped = false;\n\n  for (let i = 0; i < array.length - 1; i++) {\n    swapped = false;\n    for (let j = 0; j < array.length - i - 1; j++) {\n      // push indices to highlight and show what elements\n      // are being compared\n      animations.push([j, j + 1]);\n      animations.push([j, j + 1]);\n\n      if (array[j] > array[j + 1]) {\n        // push indices and their swapped elements to apply\n        // to array on screen\n        animations.push([j, array[j + 1]]);\n        animations.push([j + 1, array[j]]);\n\n        // swap the elements in array\n        swap(array, j, j + 1);\n\n        // make sure the loop runs again, because\n        // the algorithm is not done sorting\n        swapped = true;\n      } else {\n        // if the two elements are in order,\n        // don't do anything\n        animations.push([j, array[j]]);\n        animations.push([j + 1, array[j + 1]]);\n      }\n    }\n\n    // if no two elements are swapped, break and return\n    if (!swapped) {\n      break;\n    }\n  }\n}\n","export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxillaryarray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxillaryarray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxillaryarray,\n  animations\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxillaryarray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxillaryarray, middleIdx + 1, endIdx, mainArray, animations);\n  merge(mainArray, startIdx, middleIdx, endIdx, auxillaryarray, animations);\n}\n\nfunction merge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxillaryarray,\n  animations\n) {\n  let k = startIdx,\n    i = startIdx,\n    j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    animations.push([i, j]);\n    animations.push([i, j]);\n\n    if (auxillaryarray[i] <= auxillaryarray[j]) {\n      animations.push([k, auxillaryarray[i]]);\n      mainArray[k++] = auxillaryarray[i++];\n    } else {\n      animations.push([k, auxillaryarray[j]]);\n      mainArray[k++] = auxillaryarray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, auxillaryarray[i]]);\n    mainArray[k++] = auxillaryarray[i++];\n  }\n\n  while (j <= endIdx) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n    animations.push([k, auxillaryarray[j]]);\n    mainArray[k++] = auxillaryarray[j++];\n  }\n}\n","import { swap } from \"./swap\";\n\nexport function getQuickSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  quickSort(array, 0, array.length - 1, animations);\n  return animations;\n}\n\nfunction quickSort(array, startIdx, endIdx, animations) {\n  if (startIdx < endIdx) {\n    let partitionIdx = partition(array, startIdx, endIdx, animations);\n\n    quickSort(array, startIdx, partitionIdx - 1, animations);\n    quickSort(array, partitionIdx + 1, endIdx, animations);\n  }\n}\n\nfunction partition(array, startIdx, endIdx, animations) {\n  let pivot = array[endIdx];\n  let i = startIdx - 1;\n\n  animations.push([endIdx, -1]);\n\n  for (let j = startIdx; j <= endIdx - 1; j++) {\n    animations.push([j, -2]);\n    animations.push([j, -3]);\n    if (array[j] < pivot) {\n      i++;\n      swap(array, i, j);\n    }\n  }\n\n  animations.push([endIdx, -1]);\n\n  animations.push([i + 1, array[endIdx]]);\n  animations.push([endIdx, array[i + 1]]);\n  swap(array, i + 1, endIdx);\n  return i + 1;\n}\n","import { swap } from \"./swap\";\n\nexport function getSelectionSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxillaryarray = array.slice();\n  selectionSort(auxillaryarray, animations);\n  return animations;\n}\n\nfunction selectionSort(array, animations) {\n  for (let i = 0; i < array.length - 1; i++) {\n    let minIdx = i;\n    animations.push([i, -1]);\n    for (let j = i + 1; j < array.length; j++) {\n      animations.push([j, -2]);\n      animations.push([j, -3]);\n      if (array[j] < array[minIdx]) {\n        minIdx = j;\n      }\n    }\n\n    animations.push([minIdx, array[i]]);\n    animations.push([i, array[minIdx]]);\n    swap(array, minIdx, i);\n\n    animations.push([i, -1]);\n  }\n}\n","import React from \"react\";\nimport { Button, ButtonGroup } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nimport { getBubbleSortAnimations } from \"./Algorithms/bubblesort\";\nimport { getMergeSortAnimations } from \"./Algorithms/mergesort\";\nimport { getInsertionSortAnimations } from \"./Algorithms/insertionsort\";\nimport { getQuickSortAnimations } from \"./Algorithms/quicksort\";\nimport { getSelectionSortAnimations } from \"./Algorithms/selectionsort\";\n\nimport \"./Sorting.css\";\n\nconst ARRAY_SIZE = 12;\nconst GRAY = \"#c0c0c0\";\nconst GREEN = \"#34eb61\";\nconst RED = \"#eb4034\";\nconst ANIMATION_SPEED = 150;\n\nexport default class Sorting extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      disabledButtons: false,\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    console.log(\"Resetting array...\");\n\n    const newarray = [];\n    for (let i = 0; i < ARRAY_SIZE; i++) {\n      newarray.push(randomInt(1, 99));\n    }\n\n    this.setState({ array: newarray, disabledButtons: false });\n  }\n\n  toggleButtons() {\n    if (this.state.disabledButtons) {\n      // enable button group\n      document.getElementById(\"homebutton\").disabled = false;\n      document.getElementById(\"bubblesortbutton\").disabled = false;\n      document.getElementById(\"mergesortbutton\").disabled = false;\n      document.getElementById(\"insertionsortbutton\").disabled = false;\n      document.getElementById(\"selectionsortbutton\").disabled = false;\n      document.getElementById(\"quicksortbutton\").disabled = false;\n      document.getElementById(\"resetbutton\").disabled = false;\n      this.setState({ disabledButtons: false });\n    } else {\n      // disable button group\n      document.getElementById(\"homebutton\").disabled = true;\n      document.getElementById(\"bubblesortbutton\").disabled = true;\n      document.getElementById(\"mergesortbutton\").disabled = true;\n      document.getElementById(\"insertionsortbutton\").disabled = true;\n      document.getElementById(\"selectionsortbutton\").disabled = true;\n      document.getElementById(\"quicksortbutton\").disabled = true;\n      document.getElementById(\"resetbutton\").disabled = true;\n      this.setState({ disabledButtons: true });\n    }\n  }\n\n  mergeSort() {\n    console.log(\"Running Merge Sort...\");\n    this.toggleButtons();\n\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayElements = document.getElementsByClassName(\"array-element\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [elementOneIdx, elementTwoIdx] = animations[i];\n        const elementOneStyle = arrayElements[elementOneIdx].style;\n        const elementTwoStyle = arrayElements[elementTwoIdx].style;\n        const color = i % 3 === 0 ? GREEN : GRAY;\n        setTimeout(() => {\n          elementOneStyle.backgroundColor = color;\n          elementTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED);\n      } else {\n        setTimeout(() => {\n          const [elementOneIdx, newNumber] = animations[i];\n          arrayElements[elementOneIdx].innerHTML = newNumber;\n        }, i * ANIMATION_SPEED);\n      }\n    }\n\n    setTimeout(() => {\n      this.toggleButtons();\n    }, (animations.length + 1) * ANIMATION_SPEED);\n  }\n\n  bubbleSort() {\n    console.log(\"Running Bubble Sort...\");\n    this.toggleButtons();\n\n    const animations = getBubbleSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayElements = document.getElementsByClassName(\"array-element\");\n      const isColorChange = i % 4 < 2;\n      if (isColorChange) {\n        const [elementOneIdx, elementTwoIdx] = animations[i];\n        const elementOneStyle = arrayElements[elementOneIdx].style;\n        const elementTwoStyle = arrayElements[elementTwoIdx].style;\n        const color = i % 4 === 0 ? GREEN : GRAY;\n        setTimeout(() => {\n          elementOneStyle.backgroundColor = color;\n          elementTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED);\n      } else {\n        setTimeout(() => {\n          const [elementOneIdx, newNumber] = animations[i];\n          arrayElements[elementOneIdx].innerHTML = newNumber;\n        }, i * ANIMATION_SPEED);\n      }\n    }\n\n    setTimeout(() => {\n      this.toggleButtons();\n    }, (animations.length + 1) * ANIMATION_SPEED);\n  }\n\n  selectionSort() {\n    console.log(\"Running Selection Sort...\");\n    this.toggleButtons();\n\n    const animations = getSelectionSortAnimations(this.state.array);\n    let comparing = false;\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayElements = document.getElementsByClassName(\"array-element\");\n      const [elementOneIdx, elementTwoIdx] = animations[i];\n      const elementOneStyle = arrayElements[elementOneIdx].style;\n      if (elementTwoIdx === -1) {\n        setTimeout(() => {\n          const color = comparing === false ? RED : GRAY;\n          elementOneStyle.backgroundColor = color;\n          comparing = !comparing;\n        }, i * ANIMATION_SPEED);\n      } else if (elementTwoIdx === -2 || elementTwoIdx === -3) {\n        setTimeout(() => {\n          const color = elementTwoIdx === -2 ? GREEN : GRAY;\n          elementOneStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED);\n      } else {\n        setTimeout(() => {\n          arrayElements[elementOneIdx].innerHTML = elementTwoIdx;\n        }, i * ANIMATION_SPEED);\n      }\n    }\n\n    setTimeout(() => {\n      this.toggleButtons();\n    }, (animations.length + 1) * ANIMATION_SPEED);\n  }\n\n  quickSort() {\n    console.log(\"Running Quick Sort...\");\n    this.toggleButtons();\n\n    const animations = getQuickSortAnimations(this.state.array);\n\n    let comparing = false;\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayElements = document.getElementsByClassName(\"array-element\");\n      const [elementOneIdx, elementTwoIdx] = animations[i];\n      const elementOneStyle = arrayElements[elementOneIdx].style;\n      if (elementTwoIdx === -1) {\n        setTimeout(() => {\n          const color = comparing === false ? RED : GRAY;\n          elementOneStyle.backgroundColor = color;\n          comparing = !comparing;\n        }, i * ANIMATION_SPEED);\n      } else if (elementTwoIdx === -2 || elementTwoIdx === -3) {\n        setTimeout(() => {\n          const color = elementTwoIdx === -2 ? GREEN : GRAY;\n          elementOneStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED);\n      } else {\n        setTimeout(() => {\n          arrayElements[elementOneIdx].innerHTML = elementTwoIdx;\n        }, i * ANIMATION_SPEED);\n      }\n    }\n\n    setTimeout(() => {\n      this.toggleButtons();\n    }, (animations.length + 1) * ANIMATION_SPEED);\n  }\n\n  insertionSort() {\n    console.log(\"Running Insertion Sort...\");\n    this.toggleButtons();\n\n    const animations = getInsertionSortAnimations(this.state.array);\n\n    let comparing = false;\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayElements = document.getElementsByClassName(\"array-element\");\n\n      const [elementOneIdx, elementTwoIdx] = animations[i];\n      const elementOneStyle = arrayElements[elementOneIdx].style;\n\n      if (elementTwoIdx === -1) {\n        setTimeout(() => {\n          const color = comparing === false ? RED : GRAY;\n          elementOneStyle.backgroundColor = color;\n          comparing = !comparing;\n        }, i * ANIMATION_SPEED);\n      } else if (elementTwoIdx === -2 || elementTwoIdx === -3) {\n        setTimeout(() => {\n          const color = elementTwoIdx === -2 ? GREEN : GRAY;\n          elementOneStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED);\n      } else {\n        setTimeout(() => {\n          arrayElements[elementOneIdx].innerHTML = elementTwoIdx;\n        }, i * ANIMATION_SPEED);\n      }\n    }\n\n    setTimeout(() => {\n      this.toggleButtons();\n    }, (animations.length + 1) * ANIMATION_SPEED);\n  }\n\n  render() {\n    const { array } = this.state;\n\n    return (\n      <div>\n        <ButtonGroup className=\"sort-button-group\">\n          <Link to=\"/\">\n            <Button variant=\"primary\" id=\"homebutton\">\n              Home\n            </Button>\n          </Link>\n          <Button\n            variant=\"secondary\"\n            id=\"bubblesortbutton\"\n            onClick={() => this.bubbleSort()}\n          >\n            Bubble Sort\n          </Button>\n          <Button\n            variant=\"secondary\"\n            id=\"mergesortbutton\"\n            onClick={() => this.mergeSort()}\n          >\n            Merge Sort\n          </Button>\n          <Button\n            variant=\"secondary\"\n            id=\"insertionsortbutton\"\n            onClick={() => this.insertionSort()}\n          >\n            Insertion Sort\n          </Button>\n          <Button\n            variant=\"secondary\"\n            id=\"selectionsortbutton\"\n            onClick={() => this.selectionSort()}\n          >\n            Selection Sort\n          </Button>\n          <Button\n            variant=\"secondary\"\n            id=\"quicksortbutton\"\n            onClick={() => this.quickSort()}\n          >\n            Quick Sort\n          </Button>\n          <Button\n            variant=\"primary\"\n            id=\"resetbutton\"\n            onClick={() => this.resetArray()}\n          >\n            Reset\n          </Button>\n        </ButtonGroup>\n\n        <div className=\"array-container\">\n          {array.map((value, idx) => (\n            <div className=\"array-element\" key={idx}>\n              {value}\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","export function getInsertionSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxillaryarray = array.slice();\n  insertionSort(auxillaryarray, animations);\n  return animations;\n}\n\nfunction insertionSort(array, animations) {\n  for (let i = 1; i < array.length; i++) {\n    let key = array[i];\n    let j = i - 1;\n\n    animations.push([i, -1]);\n    while (j >= 0 && array[j] > key) {\n      animations.push([j, -2]);\n      animations.push([j, -3]);\n      animations.push([j + 1, array[j]]);\n      array[j + 1] = array[j];\n      j--;\n    }\n\n    animations.push([i, -1]);\n    animations.push([j + 1, key]);\n    array[j + 1] = key;\n  }\n}\n","import React from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nimport Home from \"./Home/Home\";\nimport Pathfinding from \"./Pathfinding/Pathfinding\";\nimport Sorting from \"./Sorting/Sorting\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <link\n        rel=\"stylesheet\"\n        href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\"\n        integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\"\n        crossorigin=\"anonymous\"\n      />\n\n      <div className=\"Header\">\n        <h1>Sorting & Pathfinding Visualizer</h1>\n      </div>\n\n      <HashRouter basename=\"/\">\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/Sorting\" component={Sorting} />\n          <Route path=\"/Pathfinding\" component={Pathfinding} />\n        </Switch>\n      </HashRouter>\n\n      <div className=\"Footer\">\n        <p>\n          Created by Steven Te. View the source code{\" \"}\n          <a href=\"https://github.com/testeven152/sorting-pathfinding-visualizer\">\n            here\n          </a>\n          .\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}